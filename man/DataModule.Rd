% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/data-module.R
\name{data}
\alias{data}
\alias{DataModule}
\alias{DataModule-class}
\alias{show,DataModule-method}
\alias{data_module}
\alias{grp_labels}
\alias{labels,DataModule-method}
\alias{groups,DataModule-method}
\alias{moduleName}
\alias{modulePath}
\alias{moduleVersion}
\alias{moduleDescription}
\alias{moduleDate}
\title{Data Modules}
\usage{
data(..., aidAsRownames = TRUE)

data_module(name = character(), version = character(), path = data_path())

grp_labels(object)

\S4method{labels}{DataModule}(object)

\S4method{groups}{DataModule}(object)

moduleName(object)

modulePath(object, base = FALSE)

moduleVersion(object)

moduleDescription(object)

moduleDate(object)
}
\arguments{
\item{...}{For \code{data}: additional arguments.}

\item{aidAsRownames}{optional parameter for \code{data}: if \code{TRUE} (the default)
the AIDs provided by the data module are used as row names of the
returned \code{data.frame} (unless they are not unique).}

\item{name}{For \code{data_module}: \code{character(1)} defining the name of the
module to load.}

\item{version}{For \code{data_module}: \code{character(1)} defining the version of the
module to load.}

\item{path}{For \code{data_module}: \code{character(1)} defining the path where data
modules are stored.}

\item{object}{A \code{DataModule} object.}

\item{base}{For \code{modulePath}: \code{logical(1)} whether the base folder or the
actual data folder should be returned. The \emph{base} folder (returned with
\code{base = TRUE}) is the folder of the module containing eventual multiple
versions of it. The data folder (returned with \code{base = FALSE}, default)
is the actual folder containing the data for the selected version of
the module.}
}
\value{
See the individual function description.
}
\description{
A Data Module provides the data of one specific module, which can be
the interview, clinical blood parameters or the metabolomics or proteomics
data sets. The actual data from a module is stored in the Textual Dataset
Format (TDF - see \link{TDF} for more details).

The \code{tidyfr} package represents a data module with the \code{DataModule} object
which provides all necessary functionality to import data of a module and to
format it properly for R.
}
\section{Loading a module}{


Available data modules in a certain path can be listed using the
\code{\link[=list_data_modules]{list_data_modules()}} function.
\itemize{
\item \code{data_module}: load a specific data module. The name and version of the
data module to load needs to be specified with parameters \code{name} and
\code{version} respectively. Parameter \code{path} can be used to set the base path
where the data module can be found. The function returns an instance of
\code{DataModule}.
}
}

\section{Accessing properties and data from a module}{

\itemize{
\item \code{data}: returns the data of a module as a \code{data.frame}. By default (with
parameter \code{aidAsRownames = TRUE}) \emph{aid}s provided by the data module
will be used as row names for the returned \code{data.frame}.
For \code{aidAsRownames = FALSE} or if the aids provided by the module are not
unique, a column \code{"aid"} is added (as first column) to the returned
\code{data.frame}.
Columns (variables) in the returned \code{data.frame} are correctly formatted
(i.e. as \code{factors}, \code{integers}, \code{numeric}, \code{character} or date/time
formats) according to the \emph{labels} information of the data module. Use
the \code{labels} function to retrieve variable information (annotation)
from the data module.
\item \code{groups}: returns a \code{data.frame} with the optional grouping of variables.
The group descriptions are provided byt the \code{grp_labels} function.
\item \code{grp_labels}: returns a \code{data.frame} with a description for each defined
variable group.
\item \code{labels}: returns a \code{data.frame} with the description and annotation of the
individual variables (labels).
\item \code{moduleName}: returns the name of a module.
\item \code{modulePath}: returns the (full) file path to the data module.
\item \code{moduleVersion}: returns the version of the data module.
\item \code{moduleDescription}: returns the description of the module.
\item \code{moduleDate}: returns the date of the module.
}
}

\section{Managing data modules}{


Data maintainers can use functions listed here to \emph{manage} existing data
resources. Alternatively, see also \code{\link[=export_tdf]{export_tdf()}} for information how to
create new data modules in TDF format.
\itemize{
\item \code{\link[=remove_participants]{remove_participants()}}: create a new version of the current module by
removing participant data for individuals with the specified aids.
}
}

\examples{

## List available test data modules provided by the tidyfr package
pth <- system.file("txt", package = "tidyfr")
list_data_modules(pth)

## Load one data module
mdl <- data_module(name = "db_example2", version = "1.0.1", path = pth)
mdl

## Get the name, description and version of the module
moduleName(mdl)
moduleDescription(mdl)
moduleVersion(mdl)

## Get the data from the module
d <- data(mdl)
d

## Variables are correctly formatted:
## categorical variables (factors):
d$x0_sex

## Dates:
d$x0_examd

## Numeric:
d$x0_age

## Get information on all variables
labels(mdl)

## Get information of variable grouping
groups(mdl)

## Get the corresponding group description
grp_labels(mdl)
}
\author{
Johannes Rainer
}
